#!/usr/local/bin/php
<?php
class MyThread extends Thread
{	
	public $serverSock;
	public $pidQueue;
	public $msgQueue;
	public $clients = [];

	public function __construct($socket,$pidQueue,$msgQueue)
	{
		$this->serverSock = $socket;
		$this->pidQueue = $pidQueue;
		$this->msgQueue = $msgQueue;
	}

	public function run()
	{
		while ($csock = @stream_socket_accept($this->serverSock,300)) {			
			$pid = pcntl_fork();
			if ($pid == 0) {
				$opening = true;
    				while($opening) {
        				$r = array($csock);
			        	$w = $e = $t =  NULL;
			        	if(0 < @stream_select($r, $w, $e, $t)) {
			          	foreach($r as $i => $fd) {
				              	if($fd == $csock) {
				              		$pid = posix_getpid();
				                  	$text = fgets($csock);
				                  	if($text == "") {
				                  		unset($this->clients[$pid]);
				                    	echo "Connection closed\n";
				                       	$opening = false;
				                       	fclose($csock);
				                       	exit(0);
				                  	}
				                  	msg_send($this->pidQueue,MSG_TYPE,$pid);
				                  	msg_send($this->msgQueue,MSG_TYPE,$text);
				                  	// echo "\r" .$text;
				          	}
						}
					}
				}
			} elseif ($pid > 0) {	
				$this->clients[$pid] = $csock;
			} 
		}

	}
}

$pidQC = ftok(__FILE__,'p');
$msgQC = ftok(__FILE__,'m');
$pidQueue = msg_get_queue($pidQC);
$msgQueue = msg_get_queue($msgQC);
const MSG_TYPE = 1;

$ssock = stream_socket_server("tcp://127.0.0.1:9501");
$myThread = new MyThread($ssock,$pidQueue,$msgQueue);
$myThread->start();

while (1) {
	msg_receive($pidQueue,MSG_TYPE,$msgType,1024,$pid);
	msg_receive($msgQueue,MSG_TYPE,$msgType,1024,$msg);

	$clients = $myThread->clients;
	if ($clients) {
		foreach ($clients as $key => $client) {
			if ($pid != $key) {
				fwrite($client, $msg);
			}
		}
	}
	usleep(1000);
}
fclose($ssock);
exit(0);

